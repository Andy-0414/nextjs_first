{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _temp,\n    _s = $RefreshSig$();\n\nimport { observable } from \"mobx\";\nimport { useStaticRendering } from \"mobx-react\";\nimport { useMemo } from \"react\";\n// eslint-disable-next-line react-hooks/rules-of-hooks\nuseStaticRendering(false);\nvar store;\nvar Store = (_class = (_temp = /*#__PURE__*/function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    _initializerDefineProperty(this, \"todolist\", _descriptor, this);\n  }\n\n  _createClass(Store, [{\n    key: \"addTodo\",\n    value: function addTodo(item) {\n      this.todolist.push(item);\n    }\n  }]);\n\n  return Store;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"todolist\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n})), _class);\n\nfunction initializeStore() {\n  var _store2;\n\n  var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : new Store(); // If your page has Next.js data fetching methods that use a Mobx store, it will\n  // get hydrated here, check `pages/ssg.js` and `pages/ssr.js` for more details\n\n\n  if (initialData) {\n    _store.hydrate(initialData);\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n}\n\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["C:/Users/pjh86/Desktop/Project/nextjs_first/store.ts"],"names":["observable","useStaticRendering","useMemo","store","Store","item","todolist","push","initializeStore","initialData","_store","hydrate","useStore","initialState"],"mappings":";;;;;;;;;;;AAAA,SAAiBA,UAAjB,QAA0D,MAA1D;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA;AACAD,kBAAkB,OAAlB;AAEA,IAAIE,KAAJ;IAEMC,K;;;;;;;;;4BAEGC,I,EAAiB;AACxB,WAAKC,QAAL,CAAcC,IAAd,CAAmBF,IAAnB;AACA;;;;qFAHAL,U;;;;;WAAmC,E;;;;AAMrC,SAASQ,eAAT,GAA6C;AAAA;;AAAA,MAApBC,WAAoB,uEAAN,IAAM;;AAC5C,MAAMC,MAAM,cAAGP,KAAH,6CAAY,IAAIC,KAAJ,EAAxB,CAD4C,CAG5C;AACA;;;AACA,MAAIK,WAAJ,EAAiB;AAChBC,IAAAA,MAAM,CAACC,OAAP,CAAeF,WAAf;AACA,GAP2C,CAQ5C;;;AACA,aAAmC,OAAOC,MAAP,CATS,CAU5C;;AACA,MAAI,CAACP,KAAL,EAAYA,KAAK,GAAGO,MAAR;AAEZ,SAAOA,MAAP;AACA;;AAED,OAAO,SAASE,QAAT,CAAkBC,YAAlB,EAAgC;AAAA;;AACtC,MAAMV,KAAK,GAAGD,OAAO,CAAC;AAAA,WAAMM,eAAe,CAACK,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOV,KAAP;AACA;;GAHeS,Q","sourcesContent":["import { action, observable, computed, runInAction } from \"mobx\";\r\nimport { useStaticRendering } from \"mobx-react\";\r\nimport { useMemo } from \"react\";\r\nimport { ITodoItem } from \"./components/TodoList\";\r\n// eslint-disable-next-line react-hooks/rules-of-hooks\r\nuseStaticRendering(typeof window === \"undefined\");\r\n\r\nlet store;\r\n\r\nclass Store {\r\n\t@observable todolist: ITodoItem[] = [];\r\n\taddTodo(item: ITodoItem) {\r\n\t\tthis.todolist.push(item);\r\n\t}\r\n}\r\n\r\nfunction initializeStore(initialData = null) {\r\n\tconst _store = store ?? new Store();\r\n\r\n\t// If your page has Next.js data fetching methods that use a Mobx store, it will\r\n\t// get hydrated here, check `pages/ssg.js` and `pages/ssr.js` for more details\r\n\tif (initialData) {\r\n\t\t_store.hydrate(initialData);\r\n\t}\r\n\t// For SSG and SSR always create a new store\r\n\tif (typeof window === \"undefined\") return _store;\r\n\t// Create the store once in the client\r\n\tif (!store) store = _store;\r\n\r\n\treturn _store;\r\n}\r\n\r\nexport function useStore(initialState) {\r\n\tconst store = useMemo(() => initializeStore(initialState), [initialState]);\r\n\treturn store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}